/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import com.sun.security.ntlm.Client;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import static java.lang.System.exit;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Lenovo
 */
public class ClientServerGUI extends javax.swing.JFrame {
    
     ServerSocket srvsc;
     Socket sock;
     String str;
     InetAddress ia;
     InputStream is;
     OutputStream os;
     PrintWriter pw;
     Scanner scanner;
     ArrayList<PrintWriter> printWriters=new ArrayList<PrintWriter>();
    
    private final String SCREENSHOT = "lhju2vru2hikv3rhj23ig2ur792yriu24jhvcujy";
    private final String SHUTDOWN =  "bhwuegcjae79rig379y9f87cc7sd9sd67dsjs843";
    private final String PROCCESSVIEW = "bsd7ojhi3t6ged7dc6dffi32jvhji89jmvjhyufd";
    private final String MESSAGE = "bsklshcu9e2vjbhil4fhjvjhc2ukjciuu5yjcj3r";
    private final String REMOTEDESKTOPACCESS = "ooibv456789ugub987653awdxhoi6546ugci5yuu";
    private final String RESTART = "w3456789ojhgfdswe46789okjfdswer67uijhcxs";
    
      private  String username="admin";
      private  char[] pwd={'a','d','m','i','n'};
        

    /**
     * Creates new form ClientServerGUI
     */
    public ClientServerGUI() {
        initComponents();
        super.setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LoginPanel = new javax.swing.JPanel();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        ClientListPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listClient = new javax.swing.JList<>();
        btnPerformAction = new javax.swing.JButton();
        CommandOutputPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtCommandOutput = new javax.swing.JTextArea();
        btnClearWindow = new javax.swing.JButton();
        RunCommandPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtRunCommand = new javax.swing.JTextArea();
        btnRun = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        ClientChoosedPanel = new javax.swing.JPanel();
        txtClient = new javax.swing.JTextField();
        ActionPanel = new javax.swing.JPanel();
        btnScreenshot = new javax.swing.JButton();
        btnMessage = new javax.swing.JButton();
        btnRemoteAcces = new javax.swing.JButton();
        btnProccesView = new javax.swing.JButton();
        btnShutdown = new javax.swing.JButton();
        btnRestart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LoginPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("LOGIN"));

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        btnLogin.setText("LOGIN");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LoginPanelLayout = new javax.swing.GroupLayout(LoginPanel);
        LoginPanel.setLayout(LoginPanelLayout);
        LoginPanelLayout.setHorizontalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUsername)
                    .addComponent(txtPassword)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLogin)))
                .addContainerGap())
        );
        LoginPanelLayout.setVerticalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLogin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ClientListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("CLIENT"));
        ClientListPanel.setEnabled(false);

        listClient.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listClient.setEnabled(false);
        listClient.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listClientValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listClient);

        btnPerformAction.setText("PERFORM ACTION");
        btnPerformAction.setEnabled(false);
        btnPerformAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPerformActionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ClientListPanelLayout = new javax.swing.GroupLayout(ClientListPanel);
        ClientListPanel.setLayout(ClientListPanelLayout);
        ClientListPanelLayout.setHorizontalGroup(
            ClientListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClientListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(ClientListPanelLayout.createSequentialGroup()
                        .addGap(0, 26, Short.MAX_VALUE)
                        .addComponent(btnPerformAction)))
                .addContainerGap())
        );
        ClientListPanelLayout.setVerticalGroup(
            ClientListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientListPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPerformAction))
        );

        CommandOutputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("COMMAND OUTPUT"));
        CommandOutputPanel.setEnabled(false);

        txtCommandOutput.setColumns(20);
        txtCommandOutput.setRows(5);
        txtCommandOutput.setEnabled(false);
        jScrollPane3.setViewportView(txtCommandOutput);

        btnClearWindow.setText("CLEAR WINDOW");
        btnClearWindow.setEnabled(false);
        btnClearWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearWindowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CommandOutputPanelLayout = new javax.swing.GroupLayout(CommandOutputPanel);
        CommandOutputPanel.setLayout(CommandOutputPanelLayout);
        CommandOutputPanelLayout.setHorizontalGroup(
            CommandOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CommandOutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(CommandOutputPanelLayout.createSequentialGroup()
                .addGap(245, 245, 245)
                .addComponent(btnClearWindow)
                .addContainerGap(235, Short.MAX_VALUE))
        );
        CommandOutputPanelLayout.setVerticalGroup(
            CommandOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CommandOutputPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClearWindow)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        RunCommandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("RUN COMMAND "));
        RunCommandPanel.setEnabled(false);

        txtRunCommand.setColumns(20);
        txtRunCommand.setRows(5);
        txtRunCommand.setEnabled(false);
        jScrollPane2.setViewportView(txtRunCommand);

        btnRun.setText("RUN");
        btnRun.setEnabled(false);
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        btnClear.setText("CLEAR");
        btnClear.setEnabled(false);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RunCommandPanelLayout = new javax.swing.GroupLayout(RunCommandPanel);
        RunCommandPanel.setLayout(RunCommandPanelLayout);
        RunCommandPanelLayout.setHorizontalGroup(
            RunCommandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RunCommandPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RunCommandPanelLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(btnClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRun)
                .addGap(58, 58, 58))
        );
        RunCommandPanelLayout.setVerticalGroup(
            RunCommandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RunCommandPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RunCommandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRun)
                    .addComponent(btnClear))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        ClientChoosedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("CLIENT"));
        ClientChoosedPanel.setEnabled(false);

        javax.swing.GroupLayout ClientChoosedPanelLayout = new javax.swing.GroupLayout(ClientChoosedPanel);
        ClientChoosedPanel.setLayout(ClientChoosedPanelLayout);
        ClientChoosedPanelLayout.setHorizontalGroup(
            ClientChoosedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtClient, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
        );
        ClientChoosedPanelLayout.setVerticalGroup(
            ClientChoosedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientChoosedPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(txtClient, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ActionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("ACTION"));
        ActionPanel.setEnabled(false);

        btnScreenshot.setText("SCREENSHOT");
        btnScreenshot.setEnabled(false);
        btnScreenshot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScreenshotActionPerformed(evt);
            }
        });

        btnMessage.setText("MESSAGE");
        btnMessage.setEnabled(false);
        btnMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMessageActionPerformed(evt);
            }
        });

        btnRemoteAcces.setText("REMOTE DESKTOP ACCESS");
        btnRemoteAcces.setEnabled(false);
        btnRemoteAcces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoteAccesActionPerformed(evt);
            }
        });

        btnProccesView.setText("PROCCES VIEW");
        btnProccesView.setEnabled(false);
        btnProccesView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProccesViewActionPerformed(evt);
            }
        });

        btnShutdown.setText("SHUTDOWN");
        btnShutdown.setEnabled(false);
        btnShutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShutdownActionPerformed(evt);
            }
        });

        btnRestart.setText("RESTART");
        btnRestart.setEnabled(false);
        btnRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ActionPanelLayout = new javax.swing.GroupLayout(ActionPanel);
        ActionPanel.setLayout(ActionPanelLayout);
        ActionPanelLayout.setHorizontalGroup(
            ActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ActionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnScreenshot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnShutdown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(115, 115, 115)
                .addGroup(ActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRemoteAcces, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnProccesView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRestart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        ActionPanelLayout.setVerticalGroup(
            ActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ActionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnScreenshot)
                    .addComponent(btnProccesView))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnShutdown)
                    .addComponent(btnRestart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMessage)
                    .addComponent(btnRemoteAcces))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(LoginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ClientListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CommandOutputPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RunCommandPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ClientChoosedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(LoginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ClientChoosedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(RunCommandPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CommandOutputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ClientListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        validateInputs();
        WaitForConnectionThread wt = new WaitForConnectionThread();
        wt.start();
                
                ClientListPanel.setEnabled(true);
                listClient.setEnabled(true);
                btnPerformAction.setEnabled(true);
                btnLogin.setEnabled(false);
                LoginPanel.setEnabled(false);
 
 
        
    }//GEN-LAST:event_btnLoginActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void btnRemoteAccesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoteAccesActionPerformed
        // TODO add your handling code here:
        try {
            pw = new PrintWriter(sock.getOutputStream());
              pw.println(REMOTEDESKTOPACCESS);
                pw.flush();
        JOptionPane.showMessageDialog(null,"Enter command in command window","Command instruction",JOptionPane.INFORMATION_MESSAGE);
                       
                String command = txtRunCommand.getText();
                pw.println(command);
                pw.flush();
                Scanner obj = new Scanner(sock.getInputStream());
           while ((str = obj.nextLine()) != null) {
                txtCommandOutput.append(str + "\n");
            }
        }
        catch(Exception ex){
               ex.printStackTrace();
        }
    }//GEN-LAST:event_btnRemoteAccesActionPerformed

    private void btnPerformActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPerformActionActionPerformed
        // TODO add your handling code here:
                  CommandOutputPanel.setEnabled(true);
                  RunCommandPanel.setEnabled(true);
                  ClientChoosedPanel.setEnabled(true);
                  ActionPanel.setEnabled(true);
                  txtClient.setEnabled(true);
                  btnClear.setEnabled(true);
                  btnClearWindow.setEnabled(true);
                  btnLogin.setEnabled(true);
                  btnMessage.setEnabled(true);
                  btnPerformAction.setEnabled(true);
                  btnRemoteAcces.setEnabled(true);
                  btnRestart.setEnabled(true);
                  btnRun.setEnabled(true);
                  btnScreenshot.setEnabled(true);
                  btnShutdown.setEnabled(true);
                  btnProccesView.setEnabled(true);
                  txtRunCommand.setEnabled(true);
                  txtCommandOutput.setEnabled(true);
                  btnPerformAction.setEnabled(true);
                  txtClient.setText(str);
                  //SelectedClientThread sct = new SelectedClientThread();
                  //sct.start();  
        
    }//GEN-LAST:event_btnPerformActionActionPerformed

    private void btnScreenshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScreenshotActionPerformed
        // TODO add your handling code here:
        
         try {
            pw = new PrintWriter(sock.getOutputStream());
              pw.println(SCREENSHOT);
                pw.flush();
         }
        catch(Exception ex){
               ex.printStackTrace();
        }
        
        
        // just to keep everthing in place
       /* try {
            SimpleDateFormat formatter=new SimpleDateFormat("yyyy-MM-dd,hh_mm _ss a");
            Date date=new Date();
            Robot robot = new Robot();
            String format = "jpg";
            String today= formatter.format(date);
           
            String fileName =today+"."+format;
           
             
            Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
            BufferedImage screenFullImage = robot.createScreenCapture(screenRect);
            ImageIO.write(screenFullImage, format, new File("i:\\screenshot\\"+fileName));
 JOptionPane.showMessageDialog(null, "screenshot taken and saved to i:\\screenshot\\"+fileName,"succcess",JOptionPane.INFORMATION_MESSAGE);
            System.out.println("A full screenshot saved!" +today);
        } catch (AWTException | IOException ex) {
            System.err.println(ex);
        }*/

    }//GEN-LAST:event_btnScreenshotActionPerformed

    private void btnShutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShutdownActionPerformed
        // TODO add your handling code here:
        

//shutdown
     Runtime runtime=Runtime.getRuntime();
       try{
            Process proc=runtime.exec("shutdown -s -t 0");
       }
       catch(Exception ex){
            javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
       }
    }//GEN-LAST:event_btnShutdownActionPerformed

    private void btnRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestartActionPerformed
        // TODO add your handling code here:
        //retsart 
           Runtime runtime=Runtime.getRuntime();
       try{
            Process proc=runtime.exec("shutdown -r -t 60");
       }
       catch(Exception ex){
            javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
       }
    }//GEN-LAST:event_btnRestartActionPerformed

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        // TODO add your handling code here:
        try {
            pw = new PrintWriter(sock.getOutputStream());
              pw.println(REMOTEDESKTOPACCESS);
                pw.flush();
                String command = txtRunCommand.getText();
              pw.println(command);
                pw.flush();
           Scanner obj = new Scanner(sock.getInputStream());
           while ((str = obj.nextLine()) != null) {
                txtCommandOutput.setText(str);
            }
                
                
        }catch(Exception ex) {
            System.out.println(ex);
            
        }
    }//GEN-LAST:event_btnRunActionPerformed

    private void btnProccesViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProccesViewActionPerformed
        // TODO add your handling code here:
        try {
            pw = new PrintWriter(sock.getOutputStream());
              pw.println(PROCCESSVIEW);
                pw.flush();
                Scanner obj = new Scanner(sock.getInputStream());
           while ((str = obj.nextLine()) != null) {
                txtCommandOutput.append(str);
                txtCommandOutput.append("\n");
            }    
        }catch(Exception ex) {
            System.out.println(ex);
            
        }
    }//GEN-LAST:event_btnProccesViewActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtRunCommand.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnClearWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearWindowActionPerformed
        // TODO add your handling code here:
        txtCommandOutput.setText("");
    }//GEN-LAST:event_btnClearWindowActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
        btnLoginActionPerformed(evt);
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void listClientValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listClientValueChanged
        // TODO add your handling code here:
        str = new String();
        str = (String) listClient.getSelectedValue();
            if(str != null) {
                btnPerformAction.setEnabled(true);
               
                    }
    }//GEN-LAST:event_listClientValueChanged

    private void btnMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMessageActionPerformed
        // TODO add your handling code here:
        try {
            pw = new PrintWriter(sock.getOutputStream());
              pw.println(MESSAGE);
                pw.flush();
            String msg = JOptionPane.showInputDialog(null,"Enter Message","Pass a Message",JOptionPane.PLAIN_MESSAGE);
                pw.println(msg);
                pw.flush();
                
        }catch(Exception ex) {
            System.out.println(ex);
            
        }
    }//GEN-LAST:event_btnMessageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientServerGUI().setVisible(true);
            }
        });
    }

     
     
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ActionPanel;
    private javax.swing.JPanel ClientChoosedPanel;
    private javax.swing.JPanel ClientListPanel;
    private javax.swing.JPanel CommandOutputPanel;
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JPanel RunCommandPanel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearWindow;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnMessage;
    private javax.swing.JButton btnPerformAction;
    private javax.swing.JButton btnProccesView;
    private javax.swing.JButton btnRemoteAcces;
    private javax.swing.JButton btnRestart;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnScreenshot;
    private javax.swing.JButton btnShutdown;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listClient;
    private javax.swing.JTextField txtClient;
    private javax.swing.JTextArea txtCommandOutput;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextArea txtRunCommand;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    
    public class WaitForConnectionThread extends Thread{
       
      InetAddress ia;
      InputStream is;
      OutputStream os;
   
    @Override
        public void run() {
            try {
                srvsc = new ServerSocket(4567);
                while(true){
                    sock = srvsc.accept();
                    ia = sock.getInetAddress();
                    is = sock.getInputStream();
                    os = sock.getOutputStream();
                    String hostIP= ia.getHostAddress() ;
                    DefaultListModel listModel = new DefaultListModel();
                    listModel.addElement(hostIP);
                    listClient.setModel(listModel);
                    ClientPojo cp = new ClientPojo(is,os,ia);
                    BufferedImage screenFullImage=ImageIO.read(is);
                    //ImageIO.write(screenFullImage, "jpg", new File("I:\\screenshot\\screen.jpg"));
    
                }
                
            } catch (IOException ex) {
                ex.printStackTrace();
 JOptionPane.showMessageDialog(null, "IOExceptions main"+ex,"error",JOptionPane.ERROR_MESSAGE);

            }          
   
   }
     }
     
    
    
private void validateInputs() {
      username=txtUsername.getText();
       char []password=txtPassword.getPassword();
       
       if (Arrays.equals(password, pwd)){
        JOptionPane.showMessageDialog(null, " login accepted","succcess",JOptionPane.INFORMATION_MESSAGE);   
       }    
       else{
       JOptionPane.showMessageDialog(null, "Incorrect Password","Failure!",JOptionPane.ERROR_MESSAGE);
        exit(0);
       }
    

}

}
